<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@:xe" />
		<property name="username" value="username" />
		<property name="password" value="password" />
	</bean>

	<!-- 마이바티스 쿼리문 출력 -->
    <bean id="realDataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
        <constructor-arg ref="dataSource"/>
        <property name="logFormatter">
            <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
                <property name="loggingType" value="MULTI_LINE"/>
                <property name="sqlPrefix" value="[SQL]"/>
            </bean>
        </property>
    </bean>
    
	<!-- MyBatis에서는 SqlSession를 생성하기 위해 SqlSessionFactory를 사용 -->
	<!-- Mybatis만 사용하면, SqlSessionFactory는 SqlSessionFactoryBuilder를 사용해서 생성한다. 
		Mybatis + Spring 연동모듈(라이브러리)에서는 SqlSessionFactoryBean가 대신 사용된다. -->
	<!-- 애너테이션으로 sqlSession(SqlSessionFactoryBean)을 수정자(Setter)방식으로 주입해서 super(SqlSessionDaoSupport)의 setSqlSessionFactory 메서드를 호출 -->
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 설정파일 -->
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property> 
		<!-- 파일위치.name에 s주의. resources 밑에 mappers라는 폴더를 생성, 그 아래 모두 -->
		<property name="mapperLocations" value="classpath*:/mappers/**/*Mapper.xml"></property>
	</bean> <!-- 실제 DB 사용 시 이것만 부른다 -->
	
	<!-- SqlSessionTemplate은 마이바티스 스프링 연동모듈의 핵심 -->
	<!-- SqlSessionTemplate은 SqlSession을 구현하고 코드에서 SqlSession를 대체하는 역할을 한다.
		SqlSessionTemplate 은 쓰레드에 안전하고 여러개의 DAO나 매퍼에서 공유할수 있다.
		SqlSessionTemplate 객체 사용, SqlSessionTemplate를 bean 으로 등록
		클래스에서 SqlSessionTemplate 필드(Field)방식으로 주입하여 사용
		SqlSession (SqlSessionTemplate)은 프록시 사용 및 스레드 안전 SqlSession 메서드를 호출 -->
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean> 
	
	<!-- <mybatis-spring:scan base-package="org.project01.mapper" /> -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- AOP Transaction을 실행하는 대상 Method 설정 -->
    <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes> 
            <tx:method name="insert*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="write*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="add*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="create*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="regist*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="set*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="update*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="modify*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="edit*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="change*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="delete*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="remove" rollback-for="RuntimeException"></tx:method>
            <tx:method name="terminate*" rollback-for="RuntimeException"></tx:method>
            <tx:method name="read*" read-only="true"></tx:method>
            <tx:method name="select*" read-only="true"></tx:method>
            <tx:method name="get*" read-only="true"></tx:method>
        </tx:attributes> 
    </tx:advice> -->
     
    <!-- AOP Pointcut/Advisor 설정 -->
<!--     <aop:config>
        <aop:pointcut expression="execution(public * moim..service.*Service.*(..))" id="controllerTx">
        <aop:advisor advice-ref="txAdvice" pointcut-ref="controllerTx">
    </aop:advisor></aop:pointcut></aop:config> -->
	<tx:annotation-driven />
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	
	<!-- <bean id="dao" class="com.lje.spring.dao.BDao" /> 이거 일일히 쓰는 대신 아래 한줄로 끝! -->
	<context:component-scan base-package="org.project01.persistence" />
	<context:component-scan base-package="org.project01.service" />
	<context:component-scan base-package="org.project01.aop" />
	<!-- 출처: https://coding-restaurant.tistory.com/109?category=862526 [코딩맛집] -->
	
	<!-- 메일 보내기 (SEND) -->
   <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <!-- <property name="host" value="smtp.gmail.com" /> -->
      <!-- <property name="port" value="587" /> -->
      <property name="port" value="465" />
      <property name="username" value="username" /> <!-- 구글아이디 -->
      <property name="password" value="password"  /> <!-- 구글 2차 비밀번호 -->
   	  <property name="defaultEncoding" value="UTF-8" />
      <!-- email 요청시는 SMTP, 보안연결 SSL 설정-->
      <property name="javaMailProperties">
         <props>
         	<prop key="mail.smtp.host">smtp.gmail.com</prop>
         	<prop key="mail.smtp.socketFactory.port">465</prop>
         	<prop key="mail.smtp.auth">true</prop>
            <prop key="mail.smtp.starttls.enable">true</prop>
            <prop key="mail.smtp.debug">true</prop>
            <!-- <prop key="mail.transport.protocol">smtp</prop> -->
            <prop key="mail.smtps.ssl.trust">*</prop>           
            <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
            <prop key="mail.smtp.socketFactory.fallback">false</prop>
         </props>
      </property>
   </bean>

<!-- 스케줄러 관리 -->
  <bean id="careerAlarmService" class="org.project01.util.AutoDelete" />
  <task:scheduler id="gsScheduler" pool-size="10" />
 <task:executor id="gsTaskExecutor" pool-size="10" />
 <task:annotation-driven executor="gsTaskExecutor" scheduler="gsScheduler" />
 </beans>
